{
  "meta": {
    "title": "Diogo Pereira - Fullstack Developer",
    "description": "Passionate about building robust, secure and scalable systems. Experience in front-end, back-end, mobile, desktop and DevOps.",
    "keywords": "Diogo Pereira, Fullstack Developer, Desenvolvedor Fullstack, Web Development, Desenvolvimento Web, Frontend, Backend, JavaScript, TypeScript, React, Node.js, HTML, CSS, Desenvolvimento Mobile, Mobile Development, Desenvolvimento Desktop, Desktop Development, DevOps, API, Software Engineer, Engenheiro de Software, Programmer, Programador, Developer Portfolio, Portfólio Desenvolvedor"
  },
  "nav": {
    "home": "Home",
    "about": "About",
    "skills": "Skills",
    "projects": "Projects",
    "contact": "Contact",
    "hireMe": "Hire Me"
  },
  "header": {
    "greeting": "HI, I'M",
    "description": "I craft resilient, performant and secure digital products. Bridging frontend delight, backend robustness and DevOps automation.",
    "actions": {
      "viewProjects": "View Projects",
      "letsTalk": "Let's Talk",
      "openGithub": "Check my GitHub"
    },
    "highlight": {
      "label": "CURRENTLY",
      "value": "Building Impactful Experiences",
      "sub": "Focused on high-quality code & DX",
      "points": [
        "Improving performance & accessibility",
        "Designing scalable architectures",
        "Prototyping experiences with high quality"
      ],
      "stats": {
        "years": "Years",
        "projects": "Projects"
      }
    }
  },
  "about": {
    "greeting": "ABOUT",
    "title": "Who I Am",
    "description": "I'm a software developer always pursuing excellence in my work and personal projects.",
    "paragraphs": [
      "With a passion for technology from a young age, I began my journey in software development several years ago. Over time, I gained experience in various areas, including front-end, back-end, mobile, desktop, and DevOps.",
      "I am always seeking new challenges and opportunities to learn and grow as a professional. If you are looking for a dedicated and passionate developer to be part of your next project, I would love to chat!"
    ],
    "insights": [
      { "title": "Experience", "desc": "Experience in various areas of software development.", "icon": "material-symbols:auto-awesome-rounded" },
      { "title": "Learning", "desc": "Adaptation to new technologies and work methodologies.", "icon": "material-symbols:lightbulb-rounded" },
      { "title": "Autonomy", "desc": "Ability to work independently and make decisions.", "icon": "material-symbols:explore-rounded" },
      { "title": "Efficiency", "desc": "Process optimization and results-oriented focus.", "icon": "material-symbols:equalizer-rounded" }
    ],
    "timeline": [
      {
        "period": "2020 - 2022",
        "role": "Mid-Level Developer",
        "description": "I worked as a Mid-Level Fullstack and DevOps developer on freelance projects focused on e-commerce."
      },
      {
        "period": "2023 - 2025",
        "role": "Senior Developer",
        "description": "I worked as a senior developer at a company in the digital sales field, leading the complete development of projects."
      },
      {
        "period": "2025 - Now",
        "role": "Mid-Level Developer",
        "description": "Currently, I work as a Fullstack and DevOps developer, at Mid-Level as I saw an opportunity for professional growth."
      }
    ]
  },
  "projects": {
    "greeting": "PROJECTS",
    "title": "My Work",
    "description": "Here are some of the projects I've worked on recently.",
    "searchbar": {
      "placeholder": "Search by name or technology..."
    },
    "list": {
      "httpzen": {
        "title": "HTTPZen",
        "description": "A modern beautiful HTTP client for the terminal, inspired by HTTPie and CURL."
      },
      "pulsar": {
        "title": "Pulsar",
        "description": "Create beautiful and customizable documentations to your projects in seconds."
      },
      "devy": {
        "title": "Devy",
        "description": "An app that will help you concentrate on your studies, it provides sound tools, a timer, etc."
      },
      "pixarti": {
        "title": "Pixarti",
        "description": "A page to create pixel arts and export to pure CSS."
      }
    },
    "viewLive": "View Live",
    "viewCode": "Source Code",
    "showMore": "See More",
    "noProjects": "No projects match your search."
  },
  "skills": {
    "greeting": "SKILLS",
    "title": "My Expertise",
    "description": "Here are some of the skills and technologies I excel in.",
    "searchbar": {
      "placeholder": "Search by name or category..."
    },
    "expandButton": "Show more",
    "collapseButton": "Show less",
    "since": "Since {date}",
    "approxYears": "~ {years} years",
    "approxMonths": "~ {months} months",
    "knowledges": {
      "VUE": { "description": "I’ve been using Vue.js since 2023 to build dynamic, accessible, modern, and reusable UIs.", "list": ["Build components with Vue 3 and Composition API", "State management with Pinia", "Routing with Vue Router", "Consuming RESTful and GraphQL APIs", "Performance and SEO optimizations", "Integration with build tools like Vite and Webpack"] },
      "REACT": { "description": "I build reactive interfaces with React, prioritizing componentization, accessibility, and performance.", "list": ["Hooks and Context API", "Functional components and composition patterns", "React Router and navigation", "Integration with REST and GraphQL APIs", "Code splitting and lazy loading", "Unit tests with Jest and Testing Library"] },
      "NUXT": { "description": "I build full‑stack Vue apps with Nuxt, leveraging SSR/SSG, routing, and data composition.", "list": ["SSR, SSG, and dynamic routes", "Composables and auto‑imports", "Nuxt Image and asset optimizations", "Internationalization", "Meta tags and SEO with definePageMeta", "Static and serverless deployment"] },
      "NEXT": { "description": "I develop React apps with Next.js, leveraging the App Router, SSR/SSG, and image optimizations.", "list": ["App Router and Server Components", "SSR, SSG, and ISR", "API Routes and Edge Functions", "next/image and performance optimizations", "Internationalization and middlewares", "Integration with Tailwind and CSS‑in‑JS"] },
      "VITE": { "description": "I set up fast dev environments with Vite, with HMR and optimized builds.", "list": ["Plugins and alias configuration", "Code splitting and build optimizations", "Ambient types and env variables", "Preprocessors (Sass, PostCSS)", "Preview and bundle analysis", "Integration with Vue, React, and SSG"] },
      "TAILWIND": { "description": "I style interfaces with Tailwind CSS productively and consistently, following design tokens.", "list": ["Theme configuration and design system", "Componentization and utility variables", "Dark mode and accessibility", "Plugins and directives (apply, variant)", "Responsive design and advanced grid/flex", "Performance and unused class removal"] },
      "STYLED_COMPONENTS": { "description": "I use Styled Components for CSS‑in‑JS with theming, componentization, and TypeScript typing.", "list": ["Themes and ThemeProvider", "Typed props and dynamic styles", "GlobalStyle and CSS reset", "Conditional styling and variants", "Animations and keyframes", "SSR integration (Next.js)"] },
      "SASS": { "description": "I organize scalable styles with Sass using variables, mixins, and modules.", "list": ["Variables, mixins, and functions", "Modular architecture and partials", "BEM strategies and utilities", "Controlled nesting", "Integration with Vite and Webpack", "CSS optimization and maintenance"] },
      "PRIMEVUE": { "description": "I build rich UIs with PrimeVue, customizing themes and accessible components.", "list": ["Advanced components (DataTable, Dialog, etc.)", "Themes, tokens, and PrimeFlex", "Form validation", "Accessibility (ARIA) and internationalization", "Deep customization via CSS/SCSS", "Integration with Nuxt/Vue Router"] },
      "REDUX": { "description": "I manage predictable global state with Redux and Redux Toolkit.", "list": ["Store, reducers, and slices", "Redux Toolkit and RTK Query", "Middlewares and side effects", "State normalization", "Integration with React and TypeScript", "DevTools and best practices"] },
      "GOLANG": { "description": "I develop performant, concurrent services with Go.", "list": ["Goroutines and channels", "HTTP servers and REST APIs", "Structs, interfaces, and errors", "Tests, benchmarks, and profiles", "Modules, dependencies, and build", "CLI tooling and automation"] },
      "RUST": { "description": "I build safe and efficient software with Rust, focusing on zero‑cost abstractions.", "list": ["Ownership and borrowing", "Traits, generics, and lifetimes", "Async/await and ecosystem (Tokio)", "Error handling (Result, anyhow)", "Cargo, workspaces, and crates", "Testing and documentation"] },
      "JAVA": { "description": "I build robust backends with Java, OO principles, and best practices.", "list": ["Collections, Streams, and Lambdas", "Concurrency and parallelism", "REST APIs and JSON serialization", "Error handling and logging", "Build with Maven/Gradle", "Unit and integration tests"] },
      "NODE": { "description": "I create scalable services with Node.js, leveraging the event loop efficiently.", "list": ["ESM/CJS, npm/pnpm, and scripts", "Streams, buffers, and filesystem", "Cluster, workers, and performance", "Env vars and environment config", "Security best practices", "Observability and structured logs"] },
      "NESTJS": { "description": "I build scalable, modular APIs with NestJS and dependency injection.", "list": ["Modules, controllers, and providers", "Pipes, Guards, and Interceptors", "Validation with class‑validator", "Swagger/OpenAPI and docs", "Authentication and authorization", "Testing and clean architecture"] },
      "EXPRESS": { "description": "I develop simple and effective REST APIs with Express.js.", "list": ["Routes, middlewares, and errors", "Validation and sanitization", "CORS, rate limit, and security", "Templates and static assets", "Scalable project structure", "Tests and continuous integration"] },
      "FASTIFY": { "description": "I build fast and secure APIs with Fastify and schema‑based validation.", "list": ["JSON schemas and serialization", "Plugins and hooks", "Encapsulation and scope", "Observability and logs", "Rate limiting and security", "TypeScript integration"] },
      "MICROSERVICES": { "description": "I design and operate microservices architectures with resilience and observability.", "list": ["Communication (HTTP, gRPC, queues)", "Discovery, configuration, and registry", "Saga patterns and orchestration", "Circuit breaker and retries", "Tracing, metrics, and logs", "Versioning and independent deploys"] },
      "WEBSOCKET": { "description": "I implement real‑time communication with WebSocket for reactive apps.", "list": ["Connections, rooms, and broadcasts", "Reconnection and fault tolerance", "Scaling with adapters", "Token‑based authentication", "Binary and text messages", "Monitoring and metrics"] },
      "SOCKET_IO": { "description": "I build real‑time features with Socket.IO on clients and servers.", "list": ["Namespaces and rooms", "Middlewares and authentication", "Acks and events", "Redis adapter and scalability", "Reconnection and backoff", "Session sharing"] },
      "GRAPHQL": { "description": "I model GraphQL schemas and resolvers for efficient, typed queries.", "list": ["Schemas, queries, mutations, and subscriptions", "Resolvers and data loaders", "Pagination and filters", "Persistence and caching", "Federation and modularization", "Security and authorization"] },
      "TDD": { "description": "I practice TDD to deliver testable, simple, and reliable code.", "list": ["Unit, integration, and end‑to‑end tests", "Mocks, stubs, and spies", "Coverage and quality metrics", "Pyramid/hexagonal testing", "CI/CD with automated tests", "Safe, incremental refactoring"] },
      "TYPESCRIPT": { "description": "I write robust code with TypeScript, using advanced typing.", "list": ["Types, interfaces, and generics", "Utility types and narrowings", "Declarations and ambient types", "Tsconfig and path configs", "Strict mode and best practices", "Integration with bundlers and frameworks"] },
      "JAVASCRIPT": { "description": "I master modern JavaScript (ES6+) for front‑end and back‑end.", "list": ["Async/await and Promises", "Closures and scope", "Prototyping and classes", "Array and object manipulation", "Modules and bundlers", "DOM APIs and events"] },
      "JWT": { "description": "I implement stateless auth with JWT securely and at scale.", "list": ["Signing and verification (HS/RS)", "Refresh tokens and rotation", "Blacklist/whitelist and expiration", "JWKs and discovery", "Scopes and authorization", "Best practices and risk mitigation"] },
      "TYPEORM": { "description": "I model domains and persistence with TypeORM and repository patterns.", "list": ["Entities, migrations, and seeds", "Relations and cascades", "QueryBuilder and optimizations", "Transactions and locks", "Cache and loading strategies", "Integration with NestJS"] },
      "SEQUELIZE": { "description": "I use Sequelize as ORM in Node.js with multi‑DB support.", "list": ["Models, migrations, and seeds", "Associations and scopes", "Hooks and validations", "Transactions and concurrency", "Raw queries and optimization", "Typing with TypeScript"] },
      "PRISMA": { "description": "I build fast, typed data layers with Prisma ORM.", "list": ["schema.prisma and migrations", "Typed client and relations", "Seeds and validation", "Pagination and performance", "Middlewares and extensions", "Integration with Nest/Next"] },
      "SWAGGER": { "description": "I document APIs with OpenAPI/Swagger, ensuring clarity and standardization.", "list": ["OpenAPI specification", "Schemas and examples", "Authentication and security", "Client/SDK generation", "Framework integration", "Publishing and versioning"] },
      "APACHE_KAFKA": { "description": "I design event pipelines with Kafka for high throughput and resilience.", "list": ["Topics, partitions, and offsets", "Producers and consumers", "Consumer groups and rebalancing", "Compaction and retention", "Schema Registry and compatibility", "Observability and tuning"] },
      "RABBITMQ": { "description": "I integrate systems with reliable messaging via RabbitMQ.", "list": ["Exchanges, queues, and bindings", "Routing keys and patterns", "Acknowledgements and retries", "Dead‑letter and priorities", "Security and TLS", "Scalability and clusters"] },
      "POSTGRESQL": { "description": "I model relational data with PostgreSQL with a focus on performance.", "list": ["Modeling and normalization", "Indexes and execution plans", "CTEs, window functions, and JSONB", "Transactions and locks", "Backups and replication", "Extensions (PostGIS, etc.)"] },
      "MYSQL": { "description": "I design MySQL schemas with efficient, reliable queries.", "list": ["Relational modeling", "Indexes and query optimization", "Transactions and isolation", "Stored procedures and views", "Backup and restore", "Monitoring and tuning"] },
      "MONGODB": { "description": "I work with MongoDB for flexible data and aggregation queries.", "list": ["Document modeling", "Aggregation pipeline", "Indexes and TTL", "Transactions and consistency", "Sharding and replication", "Schema best practices"] },
      "CASSANDRADB": { "description": "I design scalable wide‑column models with Cassandra.", "list": ["CQL and key‑based partitioning", "Consistency and replication", "Query‑driven modeling", "Compaction and TTL", "Clusters and datacenters", "Operations and monitoring"] },
      "REDIS": { "description": "I use Redis for cache, queues, and in‑memory data structures.", "list": ["Types (strings, hashes, sets, zsets)", "TTL, expiration, and eviction", "Pub/Sub and streams", "Pipelines and Lua scripts", "Cluster and replication", "Locks and rate limiting"] },
      "FIREBASE": { "description": "I integrate Firebase services for web and mobile apps quickly.", "list": ["Auth, Firestore, and Storage", "Cloud Functions and triggers", "Hosting and CDN", "Messaging/FCM", "Security rules", "Monitoring and analytics"] },
      "DOCKER": { "description": "I containerize applications with Docker for consistent deliveries.", "list": ["Dockerfiles and multi‑stage builds", "Images, layers, and caching", "Volumes and networks", "Security best practices", "Compose for development", "Publishing and registries"] },
      "KUBERNETES": { "description": "I orchestrate apps at scale with Kubernetes and cloud‑native practices.", "list": ["Deployments, Services, and Ingress", "ConfigMaps and Secrets", "Autoscaling and health checks", "RBAC and security", "Helm and GitOps", "Observability (logs/metrics)"] },
      "LINUX": { "description": "I administer Linux environments with a focus on automation and security.", "list": ["Shell, permissions, and processes", "systemd, services, and logs", "Networking, firewall, and sockets", "Monitoring tools", "Automation with scripts", "Packaging and builds"] },
      "NGINX": { "description": "I configure Nginx as a reverse proxy, load balancer, and static server.", "list": ["Reverse proxy and upstreams", "TLS, HTTP/2, and security", "Caching, compression, and headers", "Rewrite rules", "Load balancing", "Observability and status"] },
      "GIT": { "description": "I version code with Git using efficient, collaborative flows.", "list": ["Branching strategies (GitFlow, Trunk)", "Rebase, merge, and cherry‑pick", "Tags, releases, and changelog", "Bisect and troubleshooting", "Hooks and automations", "Submodules and monorepos"] },
      "GITHUB": { "description": "I organize projects on GitHub with PRs, issues, and automations.", "list": ["Pull Requests and code reviews", "Projects/Boards and Issues", "Actions and workflows", "Releases and versioning", "Templates and policies", "Security and Dependabot"] },
      "GITLAB": { "description": "I use GitLab for CI/CD, code, and packages management.", "list": ["Merge Requests and reviews", "Pipelines and runners", "Registry and packages", "Issues and milestones", "Templates and automations", "Integrations and security"] },
      "GITHUB_ACTIONS": { "description": "I automate pipelines with GitHub Actions and build matrices.", "list": ["Workflows, jobs, and steps", "Runners and caching strategies", "Secrets and environments", "Matrices and conditionals", "Publishing and deploy", "Custom actions"] },
      "CIRCLE_CI": { "description": "I build efficient pipelines in CircleCI with orbs and parallelism.", "list": ["YAML configuration", "Caches and workspaces", "Orbs and reuse", "Parallelism and test splitting", "Contexts and secrets", "Deploys and notifications"] },
      "JENKINS": { "description": "I orchestrate builds with Jenkins and declarative pipelines.", "list": ["Pipelines and stages", "Agents, nodes, and labels", "Essential plugins", "Credentials and security", "Triggers and webhooks", "Infra as code (JCasC)"] },
      "DEPLOYHQ": { "description": "I automate deploys with DeployHQ integrating repos and servers.", "list": ["Deploy pipelines", "GitHub/GitLab integration", "Environments and variables", "Logs and audit", "Notifications", "Rollback and history"] },
      "DOCKER_HUB": { "description": "I manage images on Docker Hub with versioning and automations.", "list": ["Public/private repositories", "Tags and versioning", "Automated builds", "Vulnerability scanning", "Organizations and teams", "Tokens and permissions"] },
      "DOCKER_COMPOSE": { "description": "I define multi‑service environments with Docker Compose for dev and testing.", "list": ["Services, networks, and volumes", "Profiles and overrides", "Dependencies and healthchecks", "Variables and env files", "Bind mounts and hot reload", "Local orchestration"] },
      "DOCKER_SWARM": { "description": "I orchestrate small clusters with Docker Swarm for simple setups.", "list": ["Stacks and services", "Scaling and updates", "Secrets and configs", "Networks and ingress", "Volumes and persistence", "Basic observability"] },
      "HELM": { "description": "I package and version Kubernetes deploys with Helm and reusable charts.", "list": ["Charts, templates, and values", "Releases and rollbacks", "Repos and dependencies", "Schemas and validations", "Structure patterns", "CI automation"] },
      "TERRAFORM": { "description": "I provision infrastructure as code with Terraform safely.", "list": ["Providers and resources", "Modules and reuse", "State and workspaces", "Plan, apply, and destroy", "Remote backends", "Pipeline integration"] },
      "PROMETHEUS": { "description": "I collect and query metrics with Prometheus and PromQL.", "list": ["Scraping and targets", "Exporters and instrumentation", "Alertmanager and rules", "PromQL and recording", "Retention and storage", "Grafana integration"] },
      "GRAFANA": { "description": "I create dashboards and alerts with Grafana across multiple sources.", "list": ["Datasources (Prometheus, Loki, etc.)", "Panels and visualizations", "Variables and templates", "Alerts and notifications", "Permissions and folders", "Explore and drill‑down"] },
      "SONARQUBE": { "description": "I monitor code quality with SonarQube and quality gates.", "list": ["Static analysis and rules", "Coverage and reports", "PR decoration", "Quality gate", "Plugins and languages", "CI integration"] },
      "TRAEFIK": { "description": "I manage dynamic routing with Traefik and automatic certificates.", "list": ["Providers and discovery", "Middlewares and policies", "Ingress/IngressRoute", "Let’s Encrypt and TLS", "Dashboards and metrics", "Docker/K8s integration"] },
      "HASHICORP_VAULT": { "description": "I protect secrets with Vault, using policies and dynamic secrets.", "list": ["Auth methods and policies", "KV and secret engines", "Transit and encryption", "Leases and rotation", "AppRole and tokens", "App/CI integration"] },
      "AWS": { "description": "I build on AWS with security and cost‑efficiency in mind.", "list": ["IAM and policies", "EC2, ECS, and Lambda", "S3, CloudFront, and Route 53", "VPC, subnets, and security", "CloudWatch and logs", "Infra as code (Terraform)"] },
      "AZURE": { "description": "I develop and operate workloads on Azure following best practices.", "list": ["Resource Groups and RBAC", "App Service and Functions", "Storage and CDN", "Azure DevOps/Pipelines", "Monitor and Application Insights", "Networking and security"] },
      "CLOUDFLARE": { "description": "I optimize content delivery with Cloudflare and network protections.", "list": ["DNS and CDN", "SSL/TLS and certificates", "Rules and caching", "Workers and Pages", "Firewall and rate limit", "Analytics and monitoring"] },
      "S3": { "description": "I store and distribute objects on S3 with access control.", "list": ["Buckets and policies", "Lifecycle and versioning", "Encryption and KMS", "Pre‑signed URLs", "Static website hosting", "Costs and storage classes"] },
      "SQS": { "description": "I decouple services with SQS ensuring resilience.", "list": ["Standard vs FIFO queues", "Visibility timeout and redelivery", "Dead‑letter queues", "Batching and throughput", "Policies and permissions", "Lambda integration"] },
      "LAMBDA": { "description": "I run serverless code with AWS Lambda with performance best practices.", "list": ["Handlers and layers", "Triggers (API Gateway, S3, SQS)", "Concurrency and cold start", "Observability (logs/metrics)", "Security and VPC", "Deploy and versioning"] },
      "MINIO": { "description": "I host S3‑compatible storage using MinIO in owned environments.", "list": ["Buckets and policies", "Users and keys", "Gateway and federations", "Replication and erasure coding", "Monitoring and logs", "Integration with S3 SDKs"] },
      "KOTLIN": { "description": "I develop with Kotlin using coroutines and JVM interop.", "list": ["Null‑safety and data classes", "Extensions and higher‑order functions", "Coroutines and flows", "DSLs and builders", "Java interop", "Testing and linting"] },
      "ANDROID": { "description": "I build Android apps with a focus on architecture and UX.", "list": ["Lifecycle and navigation", "Permissions and security", "ViewModel and persistence", "Networking and caching", "Responsive layouts", "Testing and instrumentation"] },
      "FLUTTER": { "description": "I develop multi‑platform UIs with Flutter with high performance.", "list": ["Widgets and responsive layouts", "State management", "Navigation and routes", "Native integration", "Internationalization", "Build and distribution"] },
      "TAURI": { "description": "I build lightweight desktop apps with Tauri combining web and Rust.", "list": ["Commands and Rust bridge", "FS, window, and dialog APIs", "Security (CSP and isolation)", "Updater and signing", "Multi‑OS packaging", "Integration with React/Vue"] },
      "ESLINT": { "description": "I standardize code with ESLint, rules, and CI integration.", "list": ["Configs and parsers", "Plugins and extends", "Custom rules", "Auto‑fix and warnings", "Prettier integration", "Pipeline checks"] },
      "JEST": { "description": "I write reliable tests with Jest and coverage reports.", "list": ["Test runner and assertions", "Mocks and spies", "Snapshots and timers", "Setup/teardown and environments", "Coverage and reports", "TS/Node integration"] },
      "BUBBLETEA": { "description": "I build responsive CLIs and TUIs in Go using the Bubble Tea framework.", "list": ["TEA architecture (Model, Msg, Update, View)", "Custom components and messages", "Reactive state management", "Async updates", "Layouts and navigation", "Integration with Lipgloss"] },
      "LIPGLOSS": { "description": "I style terminal interfaces with Lipgloss, creating layouts and themes.", "list": ["Styles and text rendering", "Colors, borders, and margins", "Composition and alignment", "Responsive terminal layouts", "Consistent theming", "Integration with Bubble Tea"] }
    }
  }
}